{"version":3,"sources":["img/daisy.png","img/timmy.png","img/tommy.png","helper/functions.js","components/firebase.js","containers/Form.js","containers/Rank.js","components/Timer.js","containers/Header.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","nextExpiringDate","now","expirationDate","Date","getHours","setHours","date","days","result","setDate","getDate","addDays","setMinutes","console","log","toISOString","composeHashkey","fullDate","dd","String","padStart","mm","getMonth","getFullYear","composeDateString","prototype","addHours","h","this","setTime","getTime","Firebase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Form","props","writeUserData","today","database","ref","push","name","state","ownerName","island","islandName","price","createdAtTimestamp","expiringAtTimestamp","isSubmitted","handleChange","bind","handleSubmit","evt","value","target","setState","event","preventDefault","className","onSubmit","htmlFor","type","onChange","id","React","Component","Rank","data","map","student","index","key","renderTableData","Timer","interval","setInterval","render","display","distance","expirationTime","Number","isNaN","Math","floor","Header","compareEntry","a","b","getDay","extractUnexpiredEntriesFromSnapshot","asdf","dataEntry","expiringTimestamp","dataset","val","keys","Object","i","length","App","getUserData","hashkey","prevHashkey","db","on","snapshot","array","once","then","pastSnapshot","merged","sort","userData","error","code","isSunday","src","pig","timmy","tommy","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.7d055038.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/daisy.aeebe057.png\";","module.exports = __webpack_public_path__ + \"static/media/timmy.d1b67101.png\";","module.exports = __webpack_public_path__ + \"static/media/tommy.d84e4be2.png\";","/**\n * Return the next expiration date relative to local time.\n *\n * @returns   {Date}  Date object equivalent of the expiration time.\n *                    Works for both morning and afternoon.\n */\nexport function nextExpiringDate(now) {\n  var expirationDate = new Date(now);\n  if (expirationDate.getHours() < 12) {\n    expirationDate.setHours(12);\n  } else if (expirationDate.getHours() < 22) {\n    expirationDate.setHours(22);\n  } else {\n    expirationDate = addDays(expirationDate, 1);\n    expirationDate.setHours(12);\n  }\n  expirationDate.setMinutes(0, 0, 0);\n  console.log(\"ISO date: \" + expirationDate.toISOString());\n  return expirationDate;\n}\n\n/**\n * Helper function to add a number of days to a Date object. Useful for transitioning months.\n *\n * @param {Date}    date  date to be modified\n * @param {Number}  days  number of days to add to the date param\n */\nfunction addDays(date, days) {\n  var result = new Date(date);\n  result.setDate(result.getDate() + days);\n  return result;\n}\n\nDate.prototype.addHours = function(h) {\n  this.setTime(this.getTime() + (h*60*60*1000));\n  return this;\n}\n\nexport function composePrevHashkey(date) {\n  var modifiedDate = date.addHours(-12);\n  return composeHashkey(modifiedDate);\n}\n\nexport function composeHashkey(date) {\n  var fullDate = composeDateString(date);\n  if (date.getHours() < 12) {\n    return fullDate + \"-0\"; // morning price\n  }\n  return fullDate + \"-1\"; // afternoon price\n}\n\nfunction composeDateString(date) {\n  var dd = String(date.getDate()).padStart(2, \"0\");\n  var mm = String(date.getMonth() + 1).padStart(2, \"0\"); //January is 0!\n  var yyyy = date.getFullYear();\n  return yyyy + \"-\" + mm + \"-\" + dd;\n}\n","import firebase from 'firebase';\n\nconst config = {\n    // apiKey: process.env.REACT_APP_API_KEY,\n    // authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n    // databaseURL: process.env.REACT_APP_DATABASE_URL,\n    // projectId: process.env.REACT_APP_PROJECT_ID,\n    // storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n    // messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\n    apiKey: \"AIzaSyAI2G1hIMEqkk9B7dAIVQfbJiDjdv-MHxI\",\n    authDomain: \"stalk-market-4dc91.fsirebaseapp.com\",\n    databaseURL: \"https://stalk-market-4dc91.firebaseio.com\",\n    projectId: \"stalk-market-4dc91\",\n    storageBucket: \"stalk-market-4dc91.appspot.com\",\n    messagingSenderId: \"458780571277\",\n    appId: \"1:458780571277:web:4cac1c4df036eb5a6054c4\",\n    measurementId: \"G-2RG24TVT9X\"\n  };\nconst Firebase = firebase.initializeApp(config);\nexport default Firebase;","import React from \"react\";\nimport Firebase from \"../components/firebase.js\";\nimport { nextExpiringDate, composeHashkey } from \"../helper/functions.js\";\n\nclass Form extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSubmitted:false,\n      price: 0,\n      islandName: \"\",\n      ownerName: \"\"\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  writeUserData = () => {\n    var today = new Date();\n    Firebase.database()\n      .ref(\"market/\" + composeHashkey(today) + \"/\")\n      .push({\n        name: this.state.ownerName,\n        island: this.state.islandName,\n        price: this.state.price,\n        createdAtTimestamp: today.toISOString(),\n        expiringAtTimestamp: nextExpiringDate(today).toISOString()\n      });\n\n    console.log(\"DATA SAVED\");\n  };\n  handleChange(evt) {\n    const value = evt.target.value;\n    this.setState({\n      [evt.target.name]: value\n    });\n  }\n  handleSubmit(event) {\n    this.writeUserData();\n    this.setState({\n      isSubmitted: true\n    });\n    event.preventDefault();\n  }\n  render() {\n    \n    return (this.state.isSubmitted ? <div className=\"submitted\"><div className=\"submitted-confirm\">\n    Submitted, Thank you!</div></div>:\n      <form className=\"form\" onSubmit={this.handleSubmit}>\n        <div className=\"question\">\n          <label htmlFor=\"basic\">\n            What's the current Stalk price on your island?\n          </label>\n          <br />\n          <input\n            type=\"number\"\n            name=\"price\"\n            value={this.state.price}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className=\"question\">\n          <label htmlFor=\"basic\">What's the name of your island?</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"islandName\"\n            value={this.state.islandName}\n            onChange={this.handleChange}\n          />\n        </div>\n        <div className=\"question\">\n          <label htmlFor=\"basic\">What's your name?</label>\n          <br />\n          <input\n            type=\"text\"\n            name=\"ownerName\"\n            value={this.state.ownerName}\n            onChange={this.handleChange}\n          />\n        </div>\n        <input id=\"myBtn\" type=\"submit\" />\n      </form>\n    );\n  }\n}\n\nexport default Form;\n","import React, { Component } from \"react\";\n\nclass Rank extends Component {\n  renderTableData() {\n    return this.props.data.map((student, index) => {\n      const { price, island, name } = student; //destructuring\n      return (\n        <tr key={index}>\n          <td>{index + 1}</td>\n          <td>{price}</td>\n          <td>{island}</td>\n          <td>{name}</td>\n        </tr>\n      );\n    });\n  }\n\n  render() {\n    return (\n      <table className=\"table\">\n        <tbody>\n          <tr>\n            <th>#</th>\n            <th>Price</th>\n            <th>Island</th>\n            <th>Owner</th>\n          </tr>\n          {this.renderTableData()}\n        </tbody>\n      </table>\n    );\n  }\n}\n\nexport default Rank;\n","import React, { Component } from \"react\";\n\nclass Timer extends Component {\n  componentDidMount() {\n    this.interval = setInterval(() => this.render(), 60 * 1000);\n  }\n\n  render() {\n    var display;\n    // Find the distance between now and the count down date\n    var now = new Date();\n    var expirationDate = new Date(this.props.expirationTime);\n    var distance = expirationDate - now;\n    // if there's nobody current on the high score list, sub in a \"-\" in the interim.\n    if (Number.isNaN(distance)) {\n      display = \"-\";\n    } else {\n      // Time calculations for days, hours, minutes and seconds\n      var hours = Math.floor(\n        (distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)\n      );\n      var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));\n\n      // Display the result\n      display = hours + \"h \" + minutes + \"mins\";\n    }\n    return <div id=\"expiration\">Price expires in {display}</div>;\n  }\n}\n\nexport default Timer;\n","import React, {Component} from \"react\";\nimport Timer from \"../components/Timer\";\n\nclass Header extends Component {\n\n  render() {\n    return (\n      <div className=\"Header\">\n        <span id=\"max-price\">{this.props.data[0].price}</span>\n        <br />\n        <span id=\"best-island\">at {this.props.data[0].island}</span>\n        <Timer expirationTime={this.props.data[0].expiringAtTimestamp} />\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React from \"react\";\nimport { composeHashkey, composePrevHashkey } from \"../helper/functions.js\";\nimport \"./App.css\";\nimport pig from \"../img/daisy.png\";\nimport timmy from \"../img/timmy.png\";\nimport tommy from \"../img/tommy.png\";\nimport Form from \"./Form.js\";\nimport Rank from \"./Rank.js\";\nimport Header from \"./Header.js\";\nimport Firebase from \"../components/firebase.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      now: new Date(),\n      isSunday : new Date().getDay()==0,\n      userData: [\n        {\n          price: 0,\n          island: \"\",\n          name: \"\"\n        }\n      ]\n    };\n  }\n\n  getUserData = () => {\n    // var now = new Date();\n    let now = this.state.now;\n    var hashkey = composeHashkey(now);\n    var prevHashkey = composePrevHashkey(now);\n    var db = Firebase.database();\n    var ref = db.ref(\"market/\" + hashkey + \"/\");\n    ref.on(\n      \"value\",\n      snapshot => {\n        let array = extractUnexpiredEntriesFromSnapshot(snapshot);\n        db.ref(\"market/\" + prevHashkey + \"/\")\n          .once(\"value\")\n          .then(pastSnapshot => {\n            // using this cuz array.concat() didn't work.\n            let merged = [\n              ...array,\n              ...extractUnexpiredEntriesFromSnapshot(pastSnapshot)\n            ];\n            merged.sort(compareEntry); // this array is sorted from highest -> lowest, starting with 0\n            if (merged.length === 0) {\n              this.setState({\n                userData: [{ price: \"-\", name: \"-\", island: \"-\" }]\n              });\n            } else {\n              this.setState({ userData: merged });\n            }\n          });\n      },\n      function(error) {\n        console.log(\"Error: \" + error.code);\n      }\n    );\n  };\n\n  componentDidMount() {\n    this.getUserData();\n    this.setState({ now: new Date() });\n  }\n\n  render() {\n    return (\n      <div>\n      {this.state.isSunday && <div className=\"banner\">It's Turnip Day!</div>}\n        <div className=\"container\">\n        {/* {this.state.isSunday && <img className=\"pig\" src={pig} />}\n        {this.state.isSunday && <img className=\"timmy\" src={timmy} /> <img className=\"tommy\" src={tommy} />} */}\n        {this.state.isSunday? <img className=\"pig\" src={pig} />:<div><img className=\"timmy\" src={timmy} /> <img className=\"tommy\" src={tommy} /></div>}\n          <Header data={this.state.userData} />\n          <Form />\n        </div>\n        <div className=\"ranking\">\n          <span className=\"rank-title\">Current price around the world</span>\n          <Rank data={this.state.userData} />\n        </div>\n      </div>\n    );\n  }\n}\n\n//compose data key\nfunction compareEntry(a, b) {\n  var now = new Date();\n  if(now.getDay()!=0){\n    // console.log(now.getDay());\n  if (Number(a.price) > Number(b.price)) return -1;\n  if (Number(b.price) > Number(a.price)) return 1;\n  return 0;}\n  else{\n    if (Number(a.price) < Number(b.price)) return -1;\n    if (Number(b.price) < Number(a.price)) return 1;\n    return 0;}\n}\n\nfunction extractUnexpiredEntriesFromSnapshot(asdf) {\n  let b = [];\n  let now = new Date();\n  let dataset = asdf.val();\n  let keys = Object.keys(dataset);\n  let dataEntry, expiringTimestamp;\n  for (var i = 0; i < keys.length; i++) {\n    let k = keys[i];\n    dataEntry = dataset[k];\n    expiringTimestamp = new Date(dataEntry.expiringAtTimestamp);\n    if (now.getTime() < expiringTimestamp.getTime()) {\n      b.push(dataEntry);\n    }\n  }\n  return b;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n// require('dotenv').config();\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}